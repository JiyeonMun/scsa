#include <iostream>

struct Point
{
	int x, y;
};
int main()
{
	// 20page - 중요한 변화.!
	int n1 = 10;			// 핵심 : 초기화시 {} 가 필요 없다.
	int x1[3] = { 1,2,3 };	// 핵심 : 초기화시 {} 가 필요 하다.
	Point p1 = { 1,2 };

	// "C++11" 에서 도입된 "일관된 초기화(uniform initialization)"문법
	// => 모든 형태의 변수를 동일한 방법({}) 로 초기화 할수 있다.

	int n2 = { 10 };
	int x2[3] = { 1,2,3 };	
	Point p2 = { 1,2 };

	// = 이 없어도 됩니다.
	int n3 { 10 };
	int x3[3] { 1,2,3 };
	Point p3 { 1,2 };


	// prevent narrow
	int n4 = 3.4;	// C 언어는 이 코드 에러 아닙니다.
					// 단, 3.4 => 3으로 변경되어서 n4에 넣기
					// C++도 허용
					// 그런데, 너무 위험합니다. 절대 이렇게 사용하지 마세요
					// C/C++을 제외한 거의 모든 언어에서는 에러 입니다.

	int n5 = { 3.4 };	// error. {} 초기화는 데이타 손실 발생되면 에러. 
	int n6{ 3.4 };		// error

	char c1 = 300;		// ok. 하지만 오버플로우 발생
	char c2 = { 300 };	// error. 300을 1바이트에 담을수 없다.
}




