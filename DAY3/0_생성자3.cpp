// 5_생성자3 - 78page ~
#include <iostream>

// 하나의 점(x, y) 를 나타내는 타입
class Point
{
	int x;
	int y;
public:
	// 핵심 1. 사용자가 "생성자를 한개도 만들지 않으면"
	// => 컴파일러가 "디폴트 생성자"를 한개 만들어 줍니다
	// => 디폴트 생성자 : 인자 없는 생성자
	// => 컴파일러가 제공하는 생성자는 아무일도 하지 않습니다.

	Point()             { x=0; y=0; std::cout << "1. Point()"         << std::endl; } // 1
	Point(int a, int b) { x=a; y=b; std::cout << "2. Point(int, int)" << std::endl; } // 2
};

int main()
{
	Point p1;		// 1번 생성자 사용
	Point p2(1, 2); // 2번 생성자 사용

	// 핵심 2. C++11 부터는 () 대신 {} 사용가능합니다.
	// => 아래 모두 인자 2개인 생성자 호출
	Point p3{ 1,2 };	// = 이 없어도 되고
	Point p4 = { 1,2 };	// = 이 있어도 됩니다.


	// 핵심 3. 객체 생성시 반드시 생성자가 호출되어야 합니다.
	// => 생성자가 없으면 컴파일 에러 입니다.
	Point arr1[5];	// 1번 생성자를 5회 호출,
					// 1번 생성자가 없으면 컴파일 에러
					// => 2번이 있으므로 컴파일러가 디폴트 제공안하므로
	Point arr2[5] = { {1,2},{2,3} };	// 2번 생성자 2회
										// 1번 생성자 3회
										

	// 핵심 4. 동적 메모리 할당과 생성자

	Point* p;	// 객체를 만든것이 아니라, 포인터 변수만 선언한것
				// 객체 생성이 아니므로 생성자 호출 안됨

	// 힙에 객체 생성.
	p = (Point*)malloc( sizeof(Point) ); 
				// => 8 바이트 크기의 메모리를 할당해 달라는 것
				// => 따라서, Point 생성자가 호출되는 것은 아니다.
				// => 단지, "Point 타입의 크기"를 할당해 달라는 것.

	free(p);	// 단순한 메모리 해지, 소멸자 호출 안됨								

	p = new Point;	// 힙에 Point 객체 한개를 할당해 달라는 것
					// => 1번 생성자 호출됩니다.
				
	delete p;		// 소멸자 호출됨.

	p = new Point(1, 1); // 2번 생성자 호출해서 힙에 객체 생성
	delete p;

}


// c++에서는 그럼 문자 한개를 배열에 넣거나 할 때 
// std::string 을 char 대신 많이 사용하나요? string이 편한 것 같아서요..

// 문자 한개 : char 사용하세요  char c = 'A'
// 문자열    : std::string   "AA"
